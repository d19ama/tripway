/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/routes": {
    /** Получение всех маршрутов */
    get: operations["readAllRoutes"];
    /** Создание нового маршрута */
    post: operations["createRoute"];
  };
  "/api/v1/routes/{id}": {
    /** Получение маршрута по id */
    get: operations["readRoute"];
    /** Удаление маршрута по id */
    delete: operations["deleteRoute"];
    /** Обновление маршрута по id */
    patch: operations["updateRoute"];
  };
  "/api/v1/route-sections/{routeId}": {
    /** Получение всех секций маршрута */
    get: operations["readAllRouteSections"];
  };
  "/api/v1/route-sections": {
    /** Создание нового маршрута */
    post: operations["createRouteSection"];
  };
  "/api/v1/users": {
    /** Создание пользователя */
    post: operations["createUser"];
  };
  "/api/v1/auth/login": {
    /** Авторизация */
    post: operations["login"];
  };
  "/api/v1/registration": {
    /** Регистрация */
    post: operations["registration"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    RouteState: "new" | "edit" | "completed";
    RouteEntity: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components["schemas"]["RouteState"];
      /**
       * @description Массив идентификаторов секций в маршруте
       * @example [
       *   "1234",
       *   "5678"
       * ]
       */
      routeSectionsIds: string[];
    };
    CreateRouteRequestDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components["schemas"]["RouteState"];
      /**
       * @description Массив идентификаторов секций в маршруте
       * @example [
       *   "1234",
       *   "5678"
       * ]
       */
      routeSectionsIds: string[];
    };
    CreateRouteResponseDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components["schemas"]["RouteState"];
      /**
       * @description Массив идентификаторов секций в маршруте
       * @example [
       *   "1234",
       *   "5678"
       * ]
       */
      routeSectionsIds: string[];
    };
    ReadRouteResponseDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components["schemas"]["RouteState"];
      /**
       * @description Массив идентификаторов секций в маршруте
       * @example [
       *   "1234",
       *   "5678"
       * ]
       */
      routeSectionsIds: string[];
    };
    UpdateRouteRequestDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id?: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name?: string;
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt?: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt?: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate?: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate?: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened?: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active?: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state?: components["schemas"]["RouteState"];
      /**
       * @description Массив идентификаторов секций в маршруте
       * @example [
       *   "1234",
       *   "5678"
       * ]
       */
      routeSectionsIds?: string[];
    };
    UpdateRouteResponseDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components["schemas"]["RouteState"];
      /**
       * @description Массив идентификаторов секций в маршруте
       * @example [
       *   "1234",
       *   "5678"
       * ]
       */
      routeSectionsIds: string[];
    };
    /** @enum {string} */
    TransportType: "airplane" | "train" | "bus" | "car" | "bicycle" | "other";
    RouteSectionEntity: {
      /**
       * @description Уникальный идентификатор секции маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Дата создания секции маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления секции маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Идентификатор маршрута
       * @example 1234567890
       */
      routeId: string;
      /**
       * @description Город назначения
       * @example Москва
       */
      destinationCity: string;
      /**
       * @description Страна назначения
       * @example Россия
       */
      destinationCountry: string;
      /**
       * @description Дата отправления
       * @example 2025-08-21T07:48:50.363Z
       */
      departure: string;
      /**
       * @description Дата прибытия
       * @example 2025-08-21T07:48:50.363Z
       */
      arrival: string;
      /**
       * @description Тип транспортного средства
       * @example airplane
       */
      transportType?: components["schemas"]["TransportType"];
      /**
       * @description Стоимость перемещения
       * @example 0
       */
      movingCost?: string;
      /**
       * @description Место пребывания
       * @example Отель
       */
      stayingPlace: string;
      /**
       * @description Стоимость проживания
       * @example 0
       */
      stayingCost?: string;
    };
    CreateRouteSectionRequestDto: {
      /**
       * @description Уникальный идентификатор секции маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Дата создания секции маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления секции маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Идентификатор маршрута
       * @example 1234567890
       */
      routeId: string;
      /**
       * @description Город назначения
       * @example Москва
       */
      destinationCity: string;
      /**
       * @description Страна назначения
       * @example Россия
       */
      destinationCountry: string;
      /**
       * @description Дата отправления
       * @example 2025-08-21T07:48:50.363Z
       */
      departure: string;
      /**
       * @description Дата прибытия
       * @example 2025-08-21T07:48:50.363Z
       */
      arrival: string;
      /**
       * @description Тип транспортного средства
       * @example airplane
       */
      transportType?: components["schemas"]["TransportType"];
      /**
       * @description Стоимость перемещения
       * @example 0
       */
      movingCost?: string;
      /**
       * @description Место пребывания
       * @example Отель
       */
      stayingPlace: string;
      /**
       * @description Стоимость проживания
       * @example 0
       */
      stayingCost?: string;
    };
    CreateRouteSectionResponseDto: {
      /**
       * @description Уникальный идентификатор секции маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Дата создания секции маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления секции маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Идентификатор маршрута
       * @example 1234567890
       */
      routeId: string;
      /**
       * @description Город назначения
       * @example Москва
       */
      destinationCity: string;
      /**
       * @description Страна назначения
       * @example Россия
       */
      destinationCountry: string;
      /**
       * @description Дата отправления
       * @example 2025-08-21T07:48:50.363Z
       */
      departure: string;
      /**
       * @description Дата прибытия
       * @example 2025-08-21T07:48:50.363Z
       */
      arrival: string;
      /**
       * @description Тип транспортного средства
       * @example airplane
       */
      transportType?: components["schemas"]["TransportType"];
      /**
       * @description Стоимость перемещения
       * @example 0
       */
      movingCost?: string;
      /**
       * @description Место пребывания
       * @example Отель
       */
      stayingPlace: string;
      /**
       * @description Стоимость проживания
       * @example 0
       */
      stayingCost?: string;
    };
    UserEntity: {
      /**
       * @description Уникальный идентификатор
       * @example 1234567890
       */
      id: string;
      /**
       * @description Дата создания
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Имя
       * @example Артём
       */
      name: string;
      /**
       * @description Фамилия
       * @example Анпилов
       */
      surname: string;
      /**
       * @description Прозвище
       * @example Fucker666
       */
      nickname?: string;
      /**
       * @description Отчество
       * @example Михайлович
       */
      patronymic?: string;
      /**
       * Format: email
       * @description Email
       * @example example@example.com
       */
      email: string;
      /**
       * @description Пароль
       * @example password
       */
      password: string;
    };
    CreateUserRequestDto: {
      /**
       * @description Уникальный идентификатор
       * @example 1234567890
       */
      id: string;
      /**
       * @description Дата создания
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Имя
       * @example Артём
       */
      name: string;
      /**
       * @description Фамилия
       * @example Анпилов
       */
      surname: string;
      /**
       * @description Прозвище
       * @example Fucker666
       */
      nickname?: string;
      /**
       * @description Отчество
       * @example Михайлович
       */
      patronymic?: string;
      /**
       * Format: email
       * @description Email
       * @example example@example.com
       */
      email: string;
      /**
       * @description Пароль
       * @example password
       */
      password: string;
    };
    LoginRequestDto: {
      /**
       * Format: email
       * @description Email
       * @example email@email.com
       */
      email: string;
      /** @description Пароль */
      password: string;
    };
    LoginResponseDto: {
      token: string;
    };
    RegistrationRequestDto: {
      /**
       * @description Уникальный идентификатор
       * @example 1234567890
       */
      id: string;
      /**
       * @description Дата создания
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
      /**
       * @description Имя
       * @example Артём
       */
      name: string;
      /**
       * @description Фамилия
       * @example Анпилов
       */
      surname: string;
      /**
       * @description Прозвище
       * @example Fucker666
       */
      nickname?: string;
      /**
       * @description Отчество
       * @example Михайлович
       */
      patronymic?: string;
      /**
       * Format: email
       * @description Email
       * @example example@example.com
       */
      email: string;
      /**
       * @description Пароль
       * @example password
       */
      password: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Получение всех маршрутов */
  readAllRoutes: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteEntity"][];
        };
      };
    };
  };
  /** Создание нового маршрута */
  createRoute: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRouteRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateRouteResponseDto"];
        };
      };
    };
  };
  /** Получение маршрута по id */
  readRoute: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReadRouteResponseDto"];
        };
      };
    };
  };
  /** Удаление маршрута по id */
  deleteRoute: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Обновление маршрута по id */
  updateRoute: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRouteRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateRouteResponseDto"];
        };
      };
    };
  };
  /** Получение всех секций маршрута */
  readAllRouteSections: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteSectionEntity"][];
        };
      };
    };
  };
  /** Создание нового маршрута */
  createRouteSection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRouteSectionRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateRouteSectionResponseDto"];
        };
      };
    };
  };
  /** Создание пользователя */
  createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  /** Авторизация */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  /** Регистрация */
  registration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrationRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
}
