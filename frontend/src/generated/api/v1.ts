/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/routes': {
    /** Получение всех маршрутов */
    get: operations['readAllRoutes'];
    /** Создание нового маршрута */
    post: operations['createRoute'];
  };
  '/api/v1/routes/{id}': {
    /** Получение маршрута по id */
    get: operations['readRoute'];
    /** Удаление маршрута по id */
    delete: operations['deleteRoute'];
    /** Обновление маршрута по id */
    patch: operations['updateRoute'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    RouteState: 'new' | 'edit' | 'completed';
    RouteEntity: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components['schemas']['RouteState'];
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt: string;
    };
    CreateRouteRequestDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state: components['schemas']['RouteState'];
    };
    ReadRouteRequestDto: {
      /**
       * @description Идентификатор маршрута
       * @example 1234567890
       */
      id: string;
    };
    UpdateRouteRequestDto: {
      /**
       * @description Уникальный идентификатор маршрута
       * @example 1234567890
       */
      id?: string;
      /**
       * @description Название маршрута
       * @example Евро-тур 2025
       */
      name?: string;
      /**
       * @description Дата начала маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      startDate?: string;
      /**
       * @description Дата окончания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      endDate?: string;
      /**
       * @description Общая стоимость поездки
       * @example 0
       */
      costs?: number;
      /**
       * @description Маршрут открыт
       * @example false
       */
      opened?: boolean;
      /**
       * @description Маршрут активен
       * @example false
       */
      active?: boolean;
      /**
       * @description Состояние маршрута
       * @example new
       */
      state?: components['schemas']['RouteState'];
      /**
       * @description Дата создания маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      createdAt?: string;
      /**
       * @description Дата обновления маршрута
       * @example 2025-08-21T07:48:50.363Z
       */
      updatedAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Получение всех маршрутов */
  readAllRoutes: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RouteEntity'][];
        };
      };
    };
  };
  /** Создание нового маршрута */
  createRoute: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRouteRequestDto'];
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateRouteRequestDto'];
        };
      };
    };
  };
  /** Получение маршрута по id */
  readRoute: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ReadRouteRequestDto'];
        };
      };
    };
  };
  /** Удаление маршрута по id */
  deleteRoute: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Обновление маршрута по id */
  updateRoute: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRouteRequestDto'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RouteEntity'];
        };
      };
    };
  };
}
